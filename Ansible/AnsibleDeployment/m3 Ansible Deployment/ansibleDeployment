Topics

    Prerequisites

    Referencing Inventory Hosts

    Ansible Configuration

    Performing Ad Hoc Commands

    Dynamic Inventories
=== Transcript

In this module, you learn the following:

    Ansible is installed on the control node and used to manage remote systems known as managed hosts.

    The managed hosts managed by a control node are defined in an inventory. Host patterns are used to reference managed hosts in the inventory.

    Ansible looks for its configuration file in four locations in order of precedence. The first configuration file found is used while the others are ignored.

    The ansible command is used to perform ad hoc commands on managed hosts.

    Ad hoc commands define the operation to perform through the use of modules and their arguments.

    Ad hoc commands requiring additional permissions can use Ansible’s privilege escalation features.
-----------------------
Control Node

    Ansible uses agentless architecture

        Differs from other configuration management utilities like Puppet, Chef

    Software installs on control node

        Few steps

        Only requirement: Python version 2.6 or later

        To check installed Python version:

        [root@controlnode ~]# yum list python
        Loaded plugins: langpacks, search-disabled-repos
        Installed Packages
        python.x86_64	2.7.5-34.el7	installed

    Ansible currently not included in Red Hat Enterprise Linux

    For installation instructions and other information: https://www.ansible.com/get-started
-----
=== Transcript

Unlike other configuration management utilities, such as Puppet and Chef, Ansible uses an agentless architecture. Due to the nature of this architecture, the installation of Ansible software takes place only on the control node. This installation involves relatively few steps and has very minimal requirements.

Ansible installation on the control node requires only that version 2.6 or later of Python software be installed. To see whether the appropriate version of Python is installed on a Red Hat Enterprise Linux system, use the yum command as shown here.

Currently, Ansible is not included directly in Red Hat Enterprise Linux. Official instructions on how to obtain, install, and update Ansible for Red Hat Enterprise Linux, as well as for other operating systems and Linux distributions, are available on the Ansible website at https://www.ansible.com/get-started.
---------------------
Your browser does not support the audio tag.
Prerequisites
Managed Hosts

    No special Ansible agent needed

    Require Python 2.4 or later

    Python prior to 2.5, also requires python-simplejson

    Control node communicates with managed hosts over network

        Multiple options available

        SSH connection used by default

    Ansible normally connects to managed hosts using same username running Ansible on control node

    SSH sessions require authentication at initiation of each connection

        Password authentication for each connection becomes unwieldy as number of managed hosts increases

        Key-based authentication preferable in enterprise environments
---------------------------
=== Transcript

Managed hosts do not need to have any special Ansible agent installed. They do need to have Python 2.4 or later installed. If the version of Python that is installed on the managed host is older than Python 2.5, then it must also have the python-simplejson package installed.

The Ansible control node communicates with managed hosts over the network. Multiple options are available, with SSH as the default. Ansible normally connects to the managed host by using the same username as the one running Ansible on the control node.

To ensure security, SSH sessions require authentication at the initiation of each connection. Relying on password authentication for each connection to each managed host quickly becomes unwieldy as the number of managed hosts increases. Therefore, in enterprise environments, key-based authentication is the preferred option.
------------------
Prerequisites
SSH Key-Based Authentication

    To authenticate ssh logins without password, use public key authentication

    ssh lets users authenticate using private/public key scheme

        Two keys generated: private and public

    Private key file used as authentication credential

        Must be kept secret and secure

    Public key copied to systems user wants to log in to

        Used to verify private key

        Does not need to be secret

    SSH server with public key issues challenge

        System with private key answers

        Possession of private key used to complete authentication
=== Transcript

Users can authenticate ssh logins without a password by using public key authentication. ssh allows users to authenticate using a private/public key scheme. This means that two keys are generated: a private key and a public key.

The private key file is used as the authentication credential. Like a password, it must be kept secret and secure. The public key is copied to systems the user wants to log in to, and is used to verify the private key. The public key does not need to be secret.

An SSH server with the public key issues a challenge that can be answered only by a system holding the private key. Possession of the private key is used to complete the authentication.
--------------------
Prerequisites
ssh-keygen

    To generate keys, use ssh-keygen

        Private key: ~/.ssh/id_rsa

        Public key: ~/.ssh/id_rsa.pub

    Default: SSH keys stored in .ssh/ directory of user’s home directory

    File permissions on private key allow:

        Read/write access to user who owns file

        Octal 0600

    File permissions on public key allow:

        All system users read access

        Only file owner write access

        Octal 0644

=== Transcript

To perform key generation, use the ssh-keygen command. This generates the private key and the public key.

After the SSH keys are generated, they are stored by default in the .ssh/ subdirectory of the user’s home directory. The file permissions on the private key allow read and write access only to the user who owns the file—that is, octal 0600. The file permissions on the public key allow all users on the system to read the file but allow only the user who owns the file to have write access—that is, octal 0644.
---------------------------
Prerequisites
ssh-copy-id

    Before using key-based authentication, need to copy public key to destination system

    To do this, use ssh-copy-id:

    [student@controlnode ~]$ ssh-copy-id student@managedhost

    After copying key, use key-based authentication to authenticate SSH connections to host
=== Transcript

Before you can use key-based authentication, the public key needs to be copied to the destination system. To do this, use ssh-copy-id as shown here.

After the public key has been copied to the destination host, future SSH connections to the host can be authenticated using key-based authentication.
---------------------------
Referencing Inventory Hosts

    After installing Ansible, ansible command available on command line

    To display ansible options, use --help or -h option:

    [student@controlnode ~]$ ansible -h
    Usage: ansible  [options]

    Options:
    -a MODULE_ARGS, --args=MODULE_ARGS

    ...output omitted...

    -v, --verbose 	verbose mode (-vvv for more, -vvvv to enable
    		connection debugging)
    --version 	show program's version number and exit
=== Transcript

After Ansible is installed, the ansible command is available for execution on the command line. To display the various options for the ansible command, use either the --help option or its abbreviated -h version, as shown here.
--------------------
Referencing Inventory Hosts
ansible Options

Option
	

Description/Example

--version
	

Helpful for identifying version of Ansible installed

[student@controlnode ~]$ ansible --version
ansible 2.0.1.0
...output omitted...

-i
	

    To use ansible command for host management, must supply inventory file

        File defines list of hosts to be managed by control node

    To supply file, specify the path to file with -i option

    To reference inventory hosts, supply host pattern to ansible

[student@controlnode ~]$ ansible  -i /path/to/inventory/file [options]

--list-hosts
	

    Useful for clarifying which managed hosts are referenced by host pattern in ansible

    Indicates both number of managed hosts being referenced and names of hosts
=== Transcript

Options for the ansible command include the following:

    The --version option is helpful for identifying the version of Ansible installed.

    To use the ansible command for host management, it must be supplied with an inventory file that defines the list of hosts to be managed by the control node. One way to do this is to specify the path to the inventory file with the -i option. To reference inventory hosts, supply a host pattern to the ansible command using the syntax shown here.

    The --list-hosts option can be useful for clarifying which managed hosts are referenced by the host pattern in an ansible command. This option indicates the number of managed hosts being referenced as well as the names of the managed hosts.

--------------------
Referencing Inventory Hosts
Host Name

    Most basic host pattern: Name of managed host

        Tells ansible to act upon just that one host

    Example: Single host name used to reference host

        cat command displays all managed hosts in myinventory file

        ansible command’s host pattern has one host name: labhost1.example.com

        Adding --list-hosts option shows number ((1)) and name of referenced host:

        [student@controlnode ~]$ cat myinventory
        [lab]
        labhost1.example.com
        labhost2.example.com

        [test]
        test1.example.com
        test2.example.com

        [datacenter1]
        labhost1.example.com
        test1.example.com

        [datacenter2]
        labhost2.example.com
        test2.example.com

        [datacenter:children]
        datacenter1
        datacenter2

        [new]
        192.168.2.1
        192.168.2.2

        [student@controlnode ~]$ ansible labhost1.example.com -i myinventory --list-hosts
          hosts (1):
             labhost1.example.com

=== Transcript

The most basic host pattern is the name for a single managed host listed in the inventory file. This specifies that the host is the only one that the ansible command will act upon.

The example here shows how a single host name is used to reference a host in an inventory file, and how to use the --list-hosts option to identify the referenced host.
----------------------
Referencing Inventory Hosts
Host Name

    Most basic host pattern: Name of managed host

        Tells ansible to act upon just that one host

    Example: Single host name used to reference host

        cat command displays all managed hosts in myinventory file

        ansible command’s host pattern has one host name: labhost1.example.com

        Adding --list-hosts option shows number ((1)) and name of referenced host:

        [student@controlnode ~]$ cat myinventory
        [lab]
        labhost1.example.com
        labhost2.example.com

        [test]
        test1.example.com
        test2.example.com

        [datacenter1]
        labhost1.example.com
        test1.example.com

        [datacenter2]
        labhost2.example.com
        test2.example.com

        [datacenter:children]
        datacenter1
        datacenter2

        [new]
        192.168.2.1
        192.168.2.2

        [student@controlnode ~]$ ansible labhost1.example.com -i myinventory --list-hosts
          hosts (1):
             labhost1.example.com

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Referencing Inventory Hosts
IP Address

    Inventories identify managed hosts by host name or IP address

    Example: Host pattern references IP address of single host in inventory file:

    [student@controlnode ~]$ ansible 192.168.2.1 -i myinventory --list-hosts
      hosts (1):
        192.168.2.1

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Referencing Inventory Hosts
Groups

    Host pattern can use host group names that define groups of hosts in inventory file

        ansible acts upon all hosts belonging to referenced group

    Example: Host group name references hosts in lab group in myinventory file:

    [student@controlnode ~]$ ansible lab -i myinventory --list-hosts
      hosts (2):
        labhost1.example.com
        labhost2.example.com
=== Transcript

The most basic host pattern is the name for a single managed host listed in the inventory file. This specifies that the host is the only one that the ansible command will act upon.

The example here shows how a single host name is used to reference a host in an inventory file, and how to use the --list-hosts option to identify the referenced host.
--------------------
Referencing Inventory Hosts
IP Address

    Inventories identify managed hosts by host name or IP address

    Example: Host pattern references IP address of single host in inventory file:

    [student@controlnode ~]$ ansible 192.168.2.1 -i myinventory --list-hosts
      hosts (1):
        192.168.2.1

=== Transcript

Inventories can identify managed hosts by IP address as well as by host name. The example here shows how a host pattern references an IP address contained in an inventory file.
-------------------
Referencing Inventory Hosts
Groups

    Host pattern can use host group names that define groups of hosts in inventory file

        ansible acts upon all hosts belonging to referenced group

    Example: Host group name references hosts in lab group in myinventory file:

    [student@controlnode ~]$ ansible lab -i myinventory --list-hosts
      hosts (2):
        labhost1.example.com
        labhost2.example.com
=== Transcript

Host groups defined in an inventory file can also be used as host patterns. When a group name is used as a host pattern, this specifies that ansible acts upon all of the hosts that belong to the named group. The example here shows how to use a host group name to reference a group of hosts defined in the inventory file.
---------------------
Referencing Inventory Hosts
Lists

    To reference multiple entries in inventory file, use comma-separated list as host pattern

        Can contain any inventory entry: host name, IP, group, etc.

    Example: List of host name, group name, and IP references hosts not defined as specific group in myinventory:

    [student@controlnode ~]$ ansible labhost1.example.com,test,192.168.2.2 -i myinventory --
    list-hosts
      hosts (4):
        labhost1.example.com
        test1.example.com
        test2.example.com
        192.168.2.2
Multiple entries in an inventory file can be referenced using a comma-separated list as the host pattern. This comma-separated list can contain any inventory entry, such as host name, IP, group, and so on. The example here shows a comma-separated list of a host name, a group name, and an IP to reference hosts that do not belong to a specific group in the myinventory inventory file.
----------------------
Referencing Inventory Hosts
All Inventory Items

    To reference all hosts in inventory file, use all host pattern keyword

    Example uses all keyword to reference all hosts in myinventory:

    [student@controlnode ~]$ ansible all -i myinventory --list-hosts
    hosts (6):
        labhost1.example.com
        test1.example.com
        labhost2.example.com
        test2.example.com
        192.168.2.1
        192.168.2.2
=== Transcript

At times, you may want to reference all of the hosts in an inventory file. Ansible provides the all host pattern keyword for that purpose. The example here shows how to use the all keyword to reference all of the hosts defined in the inventory.
------
Referencing Inventory Hosts
Wildcards

    To reference all hosts in inventory file, can use * wildcard

        Alternative to all host pattern

        Matches any string

    Example uses * to reference all hosts in myinventory:

    [student@controlnode ~]$ ansible '*' -i myinventory --list-hosts
      hosts (6):
        labhost1.example.com
        test1.example.com
        labhost2.example.com
        test2.example.com
        192.168.2.1
        192.168.2.2

	Because the * character has special meaning to the Bash shell, it is best to avoid its use to prevent ambiguities and confusion caused by an unintended shell interpretation.

=== Transcript

Another method for accomplishing the same thing as the all host pattern is to use the * wildcard character, which matches any string. The example here shows how the * wildcard references all of the hosts in the inventory.

A word of caution: Because the * character has special meaning to the Bash shell, it is best to avoid its use to prevent ambiguities and confusion caused by an unintended shell interpretation.

------------------------------
Referencing Inventory Hosts
Wildcard Pattern Matching

    To reference all managed hosts, use * by itself

    To match subset of hosts in inventory, use * with:

        Partial host name

        Partial IP address

        Group substrings

    Example uses wildcard host pattern to match hosts in example.com:

    [student@controlnode ~]$ ansible '*.example.com' -i myinventory --list-hosts
      hosts (4):
        labhost1.example.com
        test1.example.com
        labhost2.example.com
        test2.example.com

=== Transcript

While you can use the * character by itself to reference all managed hosts, you can also use it with a partial host name or IP address or with group substrings to match a subset of hosts in an inventory.

The example here uses the wildcard host pattern to match hosts in the example.com domain. Additional examples of using * to match subsets of hosts follow.
-----------------------------
Referencing Inventory Hosts
Wildcard Examples

    Example: Use wildcard host pattern to match hosts with IP address on 192.168.2.0:

    [student@controlnode ~]$ ansible '192.168.2.*' -i myinventory --list-hosts
      hosts (2):
        192.168.2.1
        192.168.2.2

    Example: Use wildcard host pattern to reference hosts belonging to groups whose names begin with datacenter:

    [student@controlnode ~]$ ansible 'datacenter*' -i myinventory --list-hosts
      hosts (4):
        labhost1.example.com
        test1.example.com
        labhost2.example.com
        test2.example.com

=== Transcript

The first example here uses a wildcard host pattern to match hosts in myinventory with an IP address on the 192.168.2.0 network.

The second example here uses a wildcard host pattern to reference hosts that belong to groups in myinventory whose names begin with datacenter.
------------------------------
Referencing Inventory Hosts
Advanced Host Patterns: Inclusion

    Ansible allows complex host patterns

        Use different exclusion and inclusion logic

    To accomplish inclusion, use : to separate groups in host pattern

        Indicates or logic

    Example: Use host pattern that references hosts in myinventory that are members of lab or datacenter1:

    [student@controlnode ~]$ ansible lab:datacenter1 -i myinventory --list-hosts
      hosts (3):
        labhost1.example.com
        labhost2.example.com
        test1.example.com
=== Transcript

In addition to wildcards, Ansible allows for the creation of complex host patterns using different exclusion and inclusion logic. Inclusion is accomplished by using the : character to separate groups in a host pattern to indicate an or logic. The example here shows how to use a host pattern that references hosts in myinventory that are members of either the lab group or the datacenter1 group.
--------------------------------------------
Referencing Inventory Hosts
Advanced Host Patterns: Intersection

    To separate groups in host pattern, combine & with :

        Denotes intersection of two groups in inventory

    Example: Use host pattern to reference hosts in myinventory that are members of both lab and datacenter1:

    [student@controlnode ~]$ ansible 'lab:&datacenter1' -i myinventory --list-hosts

      hosts (1):
        labhost1.example.com

	Because the & character has special meaning to the Bash shell, it is best to avoid it to prevent ambiguities and confusion caused by an unintended shell interpretation.
===== Transcript

By contrast, when using the & character in conjunction with the : character to separate groups in a host pattern, the combined characters denote the intersection of two groups in the inventory. The example here shows how to use a host pattern to reference hosts in myinventory that are members of both the lab group and the datacenter1 group.

A word of caution: Because the & character has special meaning to the Bash shell, it is best to avoid it to prevent ambiguities and confusion caused by an unintended shell interpretation.
-----------------
Referencing Inventory Hosts
Advanced Host Patterns: Exclusion

    To exclude hosts, use ! with : character in host pattern

        Indicates hosts to exclude

    Example: Use host pattern to reference all hosts in datacenter group of groups except test2.example.com:

    [student@controlnode ~]$ ansible 'datacenter:!test2.example.com' -i myinventory --listhosts
      hosts (3):
        labhost1.example.com
        test1.example.com
        labhost2.example.com

	Because the ! character has special meaning to the Bash shell, it is best to avoid it to prevent ambiguities and confusion caused by an unintended shell interpretation.
=== Transcript

To exclude hosts, use the ! character in conjunction with the : character in a host pattern to indicate which hosts to exclude. The example here uses the :! host pattern to reference all hosts defined in the datacenter group of groups with the exception of test2.example.com.

A word of caution: Because the ! character has special meaning to the Bash shell, it is best to avoid it to prevent ambiguities and confusion caused by an unintended shell interpretation
--------------------
Ansible Configuration

    To customize Ansible installation behavior, modify settings in configuration file

    Ansible selects configuration file from several locations on control node

Location
	

Description

/etc/ansible/ansible.cfg
	

    Location of base configuration file provided by ansible installation

    Used if no other configuration file found

~/.ansible.cfg
	

    If found in user’s home directory, used instead of base file when user runs Ansible

    Allows users to have Ansible configurations different from global one

./ansible.cfg
	

    If found in directory where ansible command is run, used instead of base or user file

    Allows directory structure with different environments or projects in separate directories

        Each directory contains configuration file with unique set of settings

        Can be hard to manage as number of configuration files grows

ansible.cfg
	

    Configuration file location defined by ANSIBLE_CONFIG environment variable

    Lets Ansible choose configuration file instead of other configuration file types

    Avoids problems resulting from users having different configuration files in different directories

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Ansible Configuration
Configuration File Precedence

    Ansible looks for configuration settings in configuration files as follows:

        Location specified as value of ANSIBLE_CONFIG environment variable

        ansible.cfg file in current working directory

        .ansible.cfg file in current user’s home directory

        /etc/ansible/ansible.cfg file

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Ansible Configuration
User-Created Configuration Files

    Ansible uses configuration settings only from first file it finds

        Ignores settings from files with lower precedence

    If users create configuration files, desired settings from global file must be duplicated to their files

        Settings not duplicated in user file remain unset, even if set in global file

=== Transcript

To customize the behavior of an Ansible installation, you modify settings in Ansible’s configuration file. Ansible selects its configuration file from one of several possible locations on the control node.

    /etc/ansible/ansible.cfg: When the ansible package is installed, it provides a base configuration file located at /etc/ansible/ansible.cfg. This file is used if no other configuration file is found.

    ~/.ansible.cfg: If .ansible.cfg exists in a user’s home directory, that configuration file is used when the user runs Ansible instead of the base configuration file in /etc. This allows users to have their own Ansible configurations separate from the global one.

    ./ansible.cfg: If an ansible.cfg file exists in the directory in which the ansible command is run, that file is used instead of the systemwide file or the user’s personal file. This allows administrators to create a directory structure where different environments or projects are housed in separate directories, with each directory containing a configuration file tailored with its own set of settings.

    ansible.cfg: While users can make use of different configuration files by placing them in different directories and then executing Ansible commands from the appropriate directory, this method can be restrictive and hard to manage as the number of configuration files grows. A more flexible option is to define the location of the configuration file with the ANSIBLE_CONFIG environment variable. When this variable is defined, Ansible chooses the specified configuration file instead of any of the previously listed configuration files.
----------------------------------------
Ansible Configuration
Configuration File Precedence

    Ansible looks for configuration settings in configuration files as follows:

        Location specified as value of ANSIBLE_CONFIG environment variable

        ansible.cfg file in current working directory

        .ansible.cfg file in current user’s home directory

        /etc/ansible/ansible.cfg file
=== Transcript

Ansible looks for configuration settings in the previously described files in the following order:

    The location specified as the value of the ANSIBLE_CONFIG environment variable.

    The ansible.cfg file in the current working directory.

    The .ansible.cfg file in the current user’s home directory.

    The /etc/ansible/ansible.cfg file.

------------------
Ansible Configuration
User-Created Configuration Files

    Ansible uses configuration settings only from first file it finds

        Ignores settings from files with lower precedence

    If users create configuration files, desired settings from global file must be duplicated to their files

        Settings not duplicated in user file remain unset, even if set in global file



=== Transcript

The first file located in this search order is the only file from which Ansible takes its configuration settings. Ansible ignores settings in other files with lower precedence.

Because of this, if users want to create their own configuration file to use instead of the global /etc/ansible/ansible.cfg configuration file, they need to duplicate all of the settings they want from the global file to their user-level file. Settings not copied to the user-level configuration file remain unset, even if they are set in the global file.
-------------------------------------
Ansible Configuration
--version Option

    Ansible configuration files can be placed in multiple locations

    May cause confusion over which configuration file Ansible is using

        Especially when multiple files exist on control node

    To identify configuration file in use, run ansible with --version

        Displays version of Ansible installed and active configuration file:

        [student@controlnode ~]$ ansible --version
        ansible 2.0.1.0
          config file = /etc/ansible/ansible.cfg
        ...output omitted...

=== Transcript

Due to the multitude of locations where Ansible configuration files can be placed, confusion may arise over which configuration file Ansible is using—especially when multiple files exist on the control node. To clearly identify the configuration file in use, run ansible with the --version option, as shown here. In addition to displaying the version of Ansible installed, this option also displays the currently active configuration file.
--------------------
Ansible Configuration
-v Option

    Another way to display active configuration file:

    [student@controlnode ~]$ ansible servers --list -v
    Using /etc/ansible/ansible.cfg as config file
    ...output omitted...

=== Transcript

Another way to display the active Ansible configuration file is to use the -v option when executing ansible on the command line, as shown here.
----------------------------------
Ansible Configuration
Configuration File

    Configuration file consists of several sections

        Contain settings defined as key/value pairs

        Titles enclosed in square brackets

        Grouped as follows in default configuration file:

        [student@controlnode ~]$ grep "^\[" /etc/ansible/ansible.cfg
        [defaults]
        [privilege_escalation]
        [paramiko_connection]
        [ssh_connection]
        [accelerate]
        [selinux]
=== Transcript

The Ansible configuration file consists of several sections. Each section contains settings defined as key/value pairs. Section titles are enclosed in square brackets. Settings are grouped under the sections in the default Ansible configuration file shown here.

-----------------------------
Ansible Configuration
Configuration File Sections

Section
	

Description

[defaults]
	

Most configuration file settings

[privilege_escalation]
	

Define how operations that require escalated privileges are run on managed hosts

[paramiko_connection] [ssh_connection] [accelerate]
	

Optimize connections to managed hosts

[selinux]
	

Define how SELinux interactions are configured

[galaxy]
	

    Define parameters related to Ansible Galaxy

    Not included in default global configuration file provided by ansible package

=== Transcript

Most of the settings in the configuration file are grouped under the general [defaults] section. The [privilege_escalation] section contains settings for defining how operations that require escalated privileges are run on managed hosts. The [paramiko_connection], [ssh_connection], and [accelerate] sections contain settings for optimizing connections to managed hosts. The [selinux] section contains settings for defining how SELinux interactions are configured.

An additional section, which is not included in the ansible package’s default global configuration file, is the [galaxy] section. This section defines parameters related to Ansible Galaxy, which is discussed in a later module.
-----------------------------------
Ansible Configuration
Predefined Settings

    To customize settings, change values in active configuration file

    Changes take effect when file is saved

    Some settings predefined within Ansible with default values

        Values valid even if settings commented out in configuration file

    To identify default values of predefined settings, see:

        Comments in /etc/ansible/ansible.cfg

        ansible manual page

Ansible Configuration
Predefined Settings

    To customize settings, change values in active configuration file

    Changes take effect when file is saved

    Some settings predefined within Ansible with default values

        Values valid even if settings commented out in configuration file

    To identify default values of predefined settings, see:

        Comments in /etc/ansible/ansible.cfg

        ansible manual page
=== Transcript

To customize settings, change their values in the currently active configuration file. The changes take effect as soon as the file is saved. Some settings are predefined within Ansible with default values; these values are valid even if their respective settings are commented out in the configuration file. To identify the default values of these predefined settings, consult the comments in the global /etc/ansible/ansible.cfg configuration file supplied by the ansible package. The ansible manual page also provides information on the default values of these predefined settings.

--------------------------------------------------
Ansible Configuration
Commonly Modified Settings

Setting
	

Description

inventory
	

Location of Ansible inventory file

remote user
	

Remote user account used to establish connections to managed hosts

become
	

Enables/disables privilege escalation for operations on managed hosts

become_method
	

Defines privilege escalation method

become_user
	

User account for escalating privileges

become_ask_pass
	

Defines whether privilege escalation prompts for password


=== Transcript

This table highlights some commonly modified Ansible configuration settings.

inventory indicates the location of the Ansible inventory file.

remote user indicates the remote user account used to establish connections to managed hosts.

become enables or disables privilege escalation for operations on managed hosts.

become_method defines the privilege escalation method.

become_user indicates the user account for escalating privileges.

become_ask_pass defines whether privilege escalation prompts for a password.

----------------
Performing Ad Hoc Commands

    Ansible lets you run on-demand tasks on managed hosts

    Ad hoc commands: Most basic operations you can perform

    To perform ad hoc commands, run ansible on control node

        As part of command, specify operation to perform

    Each command can perform only one operation

        Multiple operations require series of commands

=== Transcript

Ansible allows you to run on-demand tasks on managed hosts. These ad hoc commands are the most basic operations that can be performed with Ansible.

To perform ad hoc commands, you run ansible on the control node, specifying as part of the command the operation to be performed. Each ad hoc command can perform only one operation. To perform multiple operations, you must run a series of ad hoc commands.
----------------------------
Performing Ad Hoc Commands
Benefits

    Easy way for administrators to get started using Ansible

    Introduce advanced Ansible features: modules, tasks, plays, playbooks

    Quickly make configuration changes to large number of managed hosts

    Perform noninvasive tasks

=== Transcript

Ad hoc commands provide an easy way for administrators to get started with Ansible so they can get a better idea of how to apply it in a real-world setting. They also serve as an introduction to more advanced features such as modules, tasks, plays, and playbooks.

Even after learning advanced Ansible features, administrators often return to ad hoc commands because they offer many practical uses. You can use ad hoc commands to quickly make configuration changes to a large number of managed hosts, such as changing configuration files and performing software management tasks. Alternatively, you can use ad hoc commands to perform noninvasive tasks such as querying a large group of managed hosts for diagnostic information.
----------------
Performing Ad Hoc Commands
Syntax

    For ad hoc commands, run ansible as follows:

    ansible host pattern -m module [-a module arguments] [-i inventory]

    Host pattern defines list of managed hosts on which Ansible performs command

    List of managed hosts determined by applying host pattern against default inventory file

        Located at /etc/ansible/hosts

    To specify alternative inventory file location, use -i

    Control node can include itself as managed host

        To define control node as managed host, add control node name, its IP address, localhost name, or IP address 127.0.0.1 to inventory

=== Transcript

To run an ad hoc command, run the ansible command using the syntax shown here.

As previously discussed, you use the host pattern to define the list of managed hosts on which Ansible performs the ad hoc command. The list of managed hosts is determined by applying the host pattern against the default inventory file located at /etc/ansible/hosts. To specify the location of an alternative inventory file, use the -i option.

Note that while managed hosts are typically separate from the control node, the control node can include itself as a managed host. This may be desirable because it allows Ansible to manage the control node without creating a separate control node just for that purpose. To define the control node as a managed host, simply add the name of the control node, its IP address, the localhost name, or the IP address 127.0.0.1 to the inventory.
--------------------------

Performing Ad Hoc Commands
Modules and Arguments

    -m indicates module to use to perform remote operation

        Module: Tool designed to accomplish specific task

    Arguments passed to module using -a

        Some modules cannot accept arguments

        Others accept multiple arguments

    If no argument needed, omit -a

    If multiple arguments needed, enter as single-quoted, space-separated list:

    ansible host pattern -m module -a 'argument1 argument2' [-i inventory]

    See module’s documentation for list of available arguments

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Performing Ad Hoc Commands
Default Module

    To define default module, use module_name setting under defaults section of /etc/ansible/ansible.cfg:

    # default module name for /usr/bin/ansible
    #module_name = command

    Some Ansible configuration settings are predefined internally and have values set

        Applies even if settings commented out in configuration file

    module_name predefined with command module as default

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Performing Ad Hoc Commands
Using Predefined Module

    When -m omitted, Ansible:

        Consults configuration file

        Uses module defined there

    If no modules defined, predefined command module used

        Result: Following commands are technically equivalent:

        ansible host pattern -m command -a module arguments

        ansible host pattern -a module arguments

Copyright ©2012-2017 Red Hat, Inc. - 2.8R

=== Transcript

Ansible uses the -m option to specify the module to use to perform the remote operation. You can think of a module as a tool designed to accomplish a specific task.

Arguments are passed to the specified module using the -a option. Some modules are not capable of accepting any arguments, while other modules can accept multiple arguments. When no argument is needed, simply omit the -a option. If multiple arguments are required, enter them as a single-quoted, space-separated list as shown here.

See the module’s documentation for the list of arguments available to it.
---------------------
Performing Ad Hoc Commands
Default Module

    To define default module, use module_name setting under defaults section of /etc/ansible/ansible.cfg:

    # default module name for /usr/bin/ansible
    #module_name = command

    Some Ansible configuration settings are predefined internally and have values set

        Applies even if settings commented out in configuration file

    module_name predefined with command module as default

=== Transcript

You have the option of defining a default module, by using the module_name setting under the defaults section in the /etc/ansible/ansible.cfg configuration file. Use the syntax shown here.

As previously discussed, some Ansible configuration settings are predefined internally and have values set, even if the settings appear commented out in the Ansible configuration file. The module_name is one such parameter. It is predefined with the command module as the default.

------------------------
Performing Ad Hoc Commands
Using Predefined Module

    When -m omitted, Ansible:

        Consults configuration file

        Uses module defined there

    If no modules defined, predefined command module used

        Result: Following commands are technically equivalent:

        ansible host pattern -m command -a module arguments

        ansible host pattern -a module arguments
=== Transcript

When an ad hoc command omits the -m option, Ansible consults the configuration file and uses the module defined there. If no modules are defined, Ansible uses the internally predefined command module. Because of that, the ad hoc commands shown here are technically equivalent.
---------------------------
Performing Ad Hoc Commands
command Module

    Lets you run command on managed hosts

    Command specified by arguments following -a

    Example: Run hostname on managed hosts referenced by mymanagedhosts host pattern:

    [student@controlnode ~]$ ansible mymanagedhosts -m command -a /usr/bin/hostname
    host1.lab.example.com | SUCCESS | rc=0 >>
    host1.lab.example.com
    host2.lab.example.com | SUCCESS | rc=0 >>
    host2.lab.example.com


Notes

=== Transcript

The default command module allows you to run a command on managed hosts. The command is specified by arguments using the -a option. For example, the syntax shown here runs the hostname command, located in the /usr/bin directory, on the managed hosts referenced by the mymanagedhosts host pattern.

-------------------
Performing Ad Hoc Commands
-o Option

    Previous example returned two lines of output for each managed host

        First line is status report showing:

            Managed host on which operation was performed

        Outcome of operation

        Second line is output of remotely run command

    -o option generates just one line of output for each operation performed:

    [student@controlnode ~]$ ansible mymanagedhosts -m command -a /usr/bin/hostname -o
    host1.lab.example.com | SUCCESS | rc=0 >> (stdout) host1.lab.example.com
    host2.lab.example.com | SUCCESS | rc=0 >> (stdout) host2.lab.example.com

        Offers better readability and parsing of command output:

Notes

=== Transcript

The previous ad hoc command example returned two lines of output for each managed host. The first line is a status report showing the name of the affected managed host as well as the outcome of the operation. The second line is the output of the remotely run command.

For better readability and parsing of this output, use the -o option to generate a single line of output for each operation performed on a managed host, as shown here.

--------------------------------------------
Performing Ad Hoc Commands
shell Module

    command module lets you quickly run remote commands on managed hosts

        Not processed by shell on managed hosts

        Cannot access shell environment variables

        Cannot perform shell operations

    To run commands that require shell processing, use shell module

        Pass commands to run as arguments to module

        Ansible runs command remotely

    shell commands processed through shell

        Can use shell environment variables

        Can perform shell operations

Notes

=== Transcript

The command module allows you to quickly run remote commands on managed hosts. These commands are not processed by the shell on the managed hosts. As such, they cannot access shell environment variables or perform shell operations such as redirection and piping.

For situations in which commands require shell processing, you use the shell module. Like the command module, simply pass the commands to be run as arguments to the shell module. Ansible then runs the command remotely on the managed hosts. Unlike the command module, the shell commands are processed through a shell on the managed hosts. Therefore, shell environment variables are accessible, and shell operations such as redirection and piping are available for use.
------------------
Performing Ad Hoc Commands
Ad Hoc Command Configuration

    When running ad hoc command, things occur in background

    Configuration file (/etc/ansible/ansible.cfg) consulted for parameters

        Example: module_name parameter

    Other parameters determine how to connect to managed hosts


Notes

=== Transcript

When you run an ad hoc command, several things occur behind the scenes. First, the Ansible configuration file located at /etc/ansible/ansible.cfg is consulted for various parameters. The previously mentioned module_name parameter is one such example. In addition, other parameters determine how to perform the connection to the managed hosts.
--------------------
Performing Ad Hoc Commands
Connection Settings

    After reading parameters, Ansible makes connections to managed host

    Default: Connections initiated with SSH

        Requires connection established using account on managed host

        Account referred to as remote user

        Defined by remote_user setting under [defaults] section in /etc/ansible/ansible.cfg:

        # default user to use for playbooks if user is not specified
        # (/usr/bin/ansible will use current user as default)
        #remote_user = root

=== Transcript

After reading the connection-related parameters, Ansible proceeds with making connections to the managed host. By default, connections to managed hosts are initiated using the SSH protocol.

The SSH protocol requires the connection to be established using an account on the managed host. Ansible refers to this account as the remote user. It is defined using the remote_user setting under the [defaults] section in /etc/ansible/ansible.cfg, as shown here.
------------------------
Performing Ad Hoc Commands
Remote Operations

    Default: remote_user parameter commented out in /etc/ansible/ansible.cfg

    With parameter undefined, commands connect to managed hosts using same remote user account as one on control node running command

    After making SSH connection to managed host, specified module performs operation

    After operation completed, output displayed on control node

    Operation restricted by limits on permissions of remote user who initiated it

=== Transcript

By default, the remote_user parameter is commented out in /etc/ansible/ansible.cfg. With this parameter undefined, ad hoc commands default to connecting to managed hosts using the same remote user account as that of the user account on the control node running the ad hoc command.

After an SSH connection is made to a managed host, Ansible uses the specified module to perform the ad hoc operation. After the operation is completed, Ansible displays on the control node any standard output that was produced by the remotely run operation.

As with all operations, the remote operation is run with the permissions of the user who initiated it. Because of this, the operation is restricted by the limits of that user’s permissions.
----------------------
Performing Ad Hoc Commands
Privilege Escalation

    After connecting to managed host, Ansible can switch to another user before executing operation

    Example: Using sudo, can run ad hoc command with root privilege

        Only if connection to managed host authenticated by nonprivileged remote user

    Settings to enable privilege escalation located under [privilege_escalation] section of ansible.cfg:

    #become=True
    #become_method=sudo
    #become_user=root
    #become_ask_pass=False

=== Transcript

After successfully connecting to a managed host as a remote user, Ansible can switch to another user on the host before executing an operation. This is done using Ansible’s privilege escalation feature.

For example, using the sudo command, an ad hoc command can be run on a managed host with root privilege even if the SSH connection to the managed host was authenticated by a nonprivileged remote user.

Configuration settings to enable privilege escalation, shown here, are located under the [privilege_escalation] section of the ansible.cfg configuration file.
---------------------------
Performing Ad Hoc Commands
Enabling Privilege Escalation

    Privilege escalation not enabled by default

    To enable, uncomment become parameter and define as True:

    become=True

    Enabling privilege escalation makes become_method, become_user, and become_ask_pass parameters available

        Applies even if commented out in /etc/ansible/ansible.cfg

        Predefined internally within Ansible

        Predefined values:

        become_method=sudo
        become_user=root
        become_ask_pass=False
=== Transcript

Privilege escalation is not enabled by default. To enable privilege escalation, the become parameter must be uncommented and defined as True, as shown in the first example here.

After privilege escalation is enabled, the become_method, become_user, and become_ask_pass parameters are available. This is true even if they are commented out in /etc/ansible/ansible.cfg, because they are predefined internally within Ansible. Their predefined values are shown in the second example here.
-----------------------
Performing Ad Hoc Commands
Command Line Options

    Configure settings for remote host connections and privilege escalation in /etc/ansible/ansible.cfg

    Alternative: Define using options in ad hoc commands

        Command line options take precedence over configuration file settings

Setting
	

Command Line Option

inventory
	

-i

remote user
	

-u

become
	

--become, -b

become_method
	

--become-method

become_user
	

--become-user

become_ask_pass
	

--ask-become-pass, -K


Notes

=== Transcript

While you can configure settings for connections to remote hosts and privilege escalation in /etc/ansible/ansible.cfg, they can also be defined using options in ad hoc commands. Settings defined in ad hoc commands take precedence over those in the configuration file. This table shows the analogous command line options for each configuration file setting.

-----------------------------------
Performing Ad Hoc Commands
Obtaining Current Setting Values

    Before configuring privilege escalation settings using options, can determine currently defined values

    To do so, consult output of ansible --help:

    [student@controlnode ~]$ ansible --help
    ...output omitted...
      -b, --become		run operations with become (nopasswd implied)
      --become-method=BECOME_METHOD
    			privilege escalation method to use (default=sudo),
    			valid choices: [ sudo | su | pbrun | pfexec | runas |
    			doas ]
      --become-user=BECOME_USER
    ...output omitted...
      -u REMOTE_USER, --user=REMOTE_USER

Notes

=== Transcript

Before configuring privilege escalation settings with command line options, you can determine their currently defined values by consulting the output of ansible --help, as shown here.

-----------------------
Dynamic Inventories

    Default: Ansible provides text-based inventory format

        Defines hosts to be managed

    For large infrastructures, system information usually maintained in multiple inventory system solution

        Examples: Cobbler, Zabbix

    Ansible uses scripts to support external inventories

        Retrieve hosts information via method used by external inventory

        Example: RESTful APIs

    Also uses scripts to retrieve inventories from cloud and virtualization solutions

        Provide dynamic way to create and delete hosts

        Example: Red Hat OpenStack Platform

otes

=== Transcript

By default, Ansible provides a text-based inventory format to define the managed hosts.

When operating large infrastructures, the system information is usually maintained in one of a number of inventory system solutions available in the market—for example, Cobbler or Zabbix.

Ansible supports use of those external inventories through development of scripts that retrieve the hosts information using whatever method is available on the system in use—for example, RESTful APIs.

Similarly, Ansible supports the use of scripts to retrieve inventories from most known cloud and virtualization solutions—for example, Red Hat OpenStack Platform. By their nature, these solutions provide a dynamic way to create and delete hosts.
--------------------------------
Dynamic Inventories
Specifying Static and Dynamic Inventories

    Specify static inventories:

        Directly in /etc/ansible/hosts

        Using -i

    Use either method in scripts to provide dynamic inventory information

    To configure inventory directory in ansible.cfg, use inventory

        Default: /etc/ansible/hosts

Notes

=== Transcript

You can specify static inventories in Ansible either directly on the /etc/ansible/hosts file or through the -i parameter. You can also use either method when creating scripts to provide information about dynamic inventories.

You can configure the inventory directory in the ansible.cfg configuration file with the inventory parameter. By default, it is configured to be /etc/ansible/hosts.


Notes

=== Transcript

You can specify static inventories in Ansible either directly on the /etc/ansible/hosts file or through the -i parameter. You can also use either method when creating scripts to provide information about dynamic inventories.

You can configure the inventory directory in the ansible.cfg configuration file with the inventory parameter. By default, it is configured to be /etc/ansible/hosts.

--------------------
Dynamic Inventories
Supported Platforms

    Ansible GitHub site: https://github.com/ansible/ansible/tree/devel/contrib/inventory

        Contains scripts that support retrieving hosts information for many platforms:

Platform Type
	

Example

Private cloud platforms
	

Red Hat OpenStack Platform

Public cloud platforms
	

Rackspace Cloud, AWS, Google Compute Engine

Virtualization platforms
	

Ovirt (upstream of Red Hat Enterprise Virtualization)

Platform-as-a-Service solutions
	

OpenShift

Life cycle management tools
	

Spacewalk (upstream of Red Hat Satellite)

Hosting providers
	

Digital Ocean, Linode

    Each platform script has different requirements

        Example: Cloud credentials for Red Hat OpenStack Platform

        For specific requirements, see developing dynamic inventory sources in Ansible documentation


Notes

=== Transcript

Ansible maintains a GitHub site that contains scripts for retrieving hosts information for a large number of platforms, including the following:

    Private cloud platforms such as Red Hat OpenStack Platform.

    Public cloud platforms such as Rackspace Cloud, AWS, or Google Compute Engine.

    Virtualization platforms such as Ovirt. This is upstream of Red Hat Enterprise Virtualization.

    Platform-as-a-Service solutions such as OpenShift.

    Life cycle management tools such as Spacewalk. This is upstream of Red Hat Satellite.

    Hosting providers such as Digital Ocean or Linode.

Each platform script has a different set of requirements—for example, cloud credentials for Red Hat OpenStack Platform. See the section on developing dynamic inventory sources in the Ansible documentation for the specific requirements.
------------------------
Dynamic Inventories
Plugging Inventory System into Ansible

    Ansible uses script to retrieve hosts information for external inventory system

    Script must support --list parameter

        Returns host group and hosts information in JSON hash/dictionary:

        [student@workstation ~]$ ./inventoryscript --list
        {
          "webservers" : [ "web1.lab.example.com", "web2.lab.example.com" ],
          "databases" : [ "db1.lab.example.com", "db2.lab.example.com" ]
        }

=== Transcript

For Ansible to use a script to retrieve hosts information for an external inventory system, the script needs to support the --list parameter. The parameter returns the host group and hosts information in the JSON hash—also called a JSON dictionary—shown here.
---------------------------

Your browser does not support the audio tag.
Dynamic Inventories
Supported Platforms

    Ansible GitHub site: https://github.com/ansible/ansible/tree/devel/contrib/inventory

        Contains scripts that support retrieving hosts information for many platforms:

Platform Type
	

Example

Private cloud platforms
	

Red Hat OpenStack Platform

Public cloud platforms
	

Rackspace Cloud, AWS, Google Compute Engine

Virtualization platforms
	

Ovirt (upstream of Red Hat Enterprise Virtualization)

Platform-as-a-Service solutions
	

OpenShift

Life cycle management tools
	

Spacewalk (upstream of Red Hat Satellite)

Hosting providers
	

Digital Ocean, Linode

    Each platform script has different requirements

        Example: Cloud credentials for Red Hat OpenStack Platform

        For specific requirements, see developing dynamic inventory sources in Ansible documentation

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Dynamic Inventories
Plugging Inventory System into Ansible

    Ansible uses script to retrieve hosts information for external inventory system

    Script must support --list parameter

        Returns host group and hosts information in JSON hash/dictionary:

        [student@workstation ~]$ ./inventoryscript --list
        {
          "webservers" : [ "web1.lab.example.com", "web2.lab.example.com" ],
          "databases" : [ "db1.lab.example.com", "db2.lab.example.com" ]
        }

Copyright ©2012-2017 Red Hat, Inc. - 2.8R
Your browser does not support the audio tag.
Dynamic Inventories
Script Requirements

    Minimum: Each group must provide list of host names or IP addresses for associated hosts

    Also must support --host _hostname_ parameter

    Returns either:

        Empty JSON hash

        Hash with variables associated to host:

        [student@workstation ~]$ ./inventoryscript --host demoserver
        {
            "ntpserver" : "ntp.lab.example.com",
            "dnsserver" : "dns.lab.example.com"
        }

    Script must be executable
----------------------------------
Dynamic Inventories
Script Requirements

    Minimum: Each group must provide list of host names or IP addresses for associated hosts

    Also must support --host _hostname_ parameter

    Returns either:

        Empty JSON hash

        Hash with variables associated to host:

        [student@workstation ~]$ ./inventoryscript --host demoserver
        {
            "ntpserver" : "ntp.lab.example.com",
            "dnsserver" : "dns.lab.example.com"
        }

    Script must be executable

Notes

=== Transcript

At a minimum, each group must provide a list of host names or IP addresses for its associated hosts.

The script also needs to support the --host _hostname_ parameter, returning either an empty JSON hash or one with the variables associated to that host, as shown here.

Finally, a script creating a dynamic inventory must be executable for Ansible to use it.

-----------------------------
Dynamic Inventories
Multiple Inventories

    To use multiple inventories in same run, one of the following must be a directory:

        Value passed to -i

        Value of inventory in /etc/ansible/ansible.cfg

    If so, files included on directory used to retrieve information from multiple inventories

    Inventories can be static or dynamic

    Within directory:

        Executable files used to retrieve dynamic inventories

        Static files used as static inventories


Notes

=== Transcript

Ansible supports use of multiple inventories in the same run. If either the value passed to the -i parameter or the value of the inventory parameter in the /etc/ansible/ansible.cfg configuration is a directory, the files included on it are used to retrieve information from multiple inventories.

The inventories can be either static or dynamic. The executable files within the directory are used to retrieve dynamic inventories, and the static files are used as static inventories.
----------------------











